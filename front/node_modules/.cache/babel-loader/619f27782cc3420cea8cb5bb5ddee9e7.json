{"ast":null,"code":"import { bus } from '@/event-bus';\nexport default {\n  name: 'RotatorMain',\n  data() {\n    return {\n      azimut: 0,\n      elevation: 0,\n      battery: 0,\n      ws: null,\n      prev_azimut: 0,\n      setted_azimut: 0,\n      prev_elevation: 0,\n      setted_elevation: 0,\n      alert_axes: false,\n      alerting_done: false,\n      alert_times: 0,\n      alert_axes2: true\n    };\n  },\n  created() {\n    /*bus.$on('return_data_angles', (data) => {\n      this.setted_azimut = data.azimut\n      this.setted_elevation = data.elevation\n    })*/\n    /*this.ws = new WebSocket(`ws://${window.location.hostname}/ws`) // `ws://localhost:2000/`\n    this.ws.onopen = function () {\n      // eslint-disable-next-line\n      console.log('WS подключен')\n    }\n    this.ws.onclose = function (eventclose) {\n      // eslint-disable-next-line\n      console.log('Cоеденение закрыто: ')\n      // eslint-disable-next-line\n      console.log(eventclose)\n    }\n    this.ws.onmessage = function (msg) {\n      var response = JSON.parse(msg.data)\n      this.battery = response.voltage.toFixed(2); this.azimut = response.azimut.toFixed(2); this.elevation = response.elevation.toFixed(2)\n    }.bind(this)\n    bus.$on('send_ws', (mess) => { this.ws.send(mess) })*/\n    setInterval(() => {\n      this.$ajax.get(`/api/v1/data/get/angles`).then(response => {\n        this.battery = response.data.voltage.toFixed(2);\n        this.azimut = response.data.azimut.toFixed(3);\n        this.elevation = response.data.elevation.toFixed(2);\n        this.setted_azimut = response.data.setted_azimut.toFixed(3);\n        this.setted_elevation = response.data.setted_elevation.toFixed(3);\n      });\n    }, 1000);\n    setInterval(() => {\n      this.check_angles();\n    }, 1000);\n  },\n  methods: {\n    zeroaxes() {\n      this.$ajax.post('/api/v1/data/set/nullX', {\n        key: localStorage.getItem('rotator_client_id')\n      });\n    },\n    check_angles() {\n      bus.$emit('get_data_angles');\n      if (Math.abs(this.prev_azimut - this.azimut) < 1) {\n        if (Math.abs(this.azimut - this.setted_azimut) > 2) {\n          if ( /*this.alerting_done == false && */this.alert_times != 0) {\n            this.alert_axes = true;\n          }\n          this.alert_times += 1;\n        } else {\n          this.alert_times = 0;\n          this.alerting_done = false;\n          this.alert_axes = false;\n        }\n      }\n      this.prev_azimut = this.azimut;\n    }\n  }\n};","map":{"version":3,"mappings":"AAsCA;AAEA;EACAA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;AACA;AACA;AACA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACAC;MACA;QACA;QACA;QACA;QACA;QACA;MACA;IACA;IACAA;MAAA;IAAA;EACA;EAEAC;IACAC;MACA,WACAC;QACAC;MACA;IACA;IACAC;MACAC;MAEA;QACA;UACA;YACA;UACA;UACA;QACA,OACA;UACA;UACA;UACA;QACA;MACA;MAEA;IAEA;EACA;AACA","names":["name","data","azimut","elevation","battery","ws","prev_azimut","setted_azimut","prev_elevation","setted_elevation","alert_axes","alerting_done","alert_times","alert_axes2","created","setInterval","methods","zeroaxes","post","key","check_angles","bus"],"sourceRoot":"src/components","sources":["RotatorMain.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <v-layout text-xs-center wrap>\n      <v-flex xs12 sm6 offset-sm3>\n        <v-card>\n          <v-card-title primary-title>\n            <div class=\"ma-auto\">\n              <h1><span class=\"black--text\">{{ azimut }}&deg;</span></h1>\n              <span class=\"grey--text\">Азимут</span>\n              <br>\n              <h1><span class=\"black--text\">{{ elevation }}&deg;</span></h1>\n              <span class=\"grey--text\">Элевация</span>\n              <br>\n              <h1><span class=\"black--text\">{{ battery }} B</span></h1>\n              <span class=\"grey--text\">Напряжение батареи</span>\n              <br>\n              <h3><span class=\"black--text\">{{ setted_azimut }}&deg; {{ setted_elevation }}&deg;</span></h3>\n              <span class=\"grey--text\">Заданные значения</span>\n              <br>\n\n            </div>\n          </v-card-title>\n        </v-card>\n      </v-flex>\n    </v-layout>\n\n    <v-snackbar v-model=\"alert_axes2\" :timeout=\"0\" outlined tile color=\"red accent-2\" absolute centered right>\n      Мотор, походу, не доехал до конца\n      <!--<template>\n        <v-btn color=\"red\" text @click=\"alert_axes = false; alerting_done = true;\">\n          Закрыть\n        </v-btn>\n      </template>-->\n    </v-snackbar>\n  </div>\n</template>\n\n<script>\nimport { bus } from '@/event-bus'\n\nexport default {\n  name: 'RotatorMain',\n  data() {\n    return {\n      azimut: 0,\n      elevation: 0,\n      battery: 0,\n      ws: null,\n      prev_azimut: 0,\n      setted_azimut: 0,\n      prev_elevation: 0,\n      setted_elevation: 0,\n      alert_axes: false,\n      alerting_done: false,\n      alert_times: 0,\n      alert_axes2: true\n    }\n  },\n  created() {\n    /*bus.$on('return_data_angles', (data) => {\n      this.setted_azimut = data.azimut\n      this.setted_elevation = data.elevation\n    })*/\n    /*this.ws = new WebSocket(`ws://${window.location.hostname}/ws`) // `ws://localhost:2000/`\n    this.ws.onopen = function () {\n      // eslint-disable-next-line\n      console.log('WS подключен')\n    }\n    this.ws.onclose = function (eventclose) {\n      // eslint-disable-next-line\n      console.log('Cоеденение закрыто: ')\n      // eslint-disable-next-line\n      console.log(eventclose)\n    }\n    this.ws.onmessage = function (msg) {\n      var response = JSON.parse(msg.data)\n      this.battery = response.voltage.toFixed(2); this.azimut = response.azimut.toFixed(2); this.elevation = response.elevation.toFixed(2)\n    }.bind(this)\n    bus.$on('send_ws', (mess) => { this.ws.send(mess) })*/\n    setInterval(() => {\n      this.$ajax.get(`/api/v1/data/get/angles`).then((response) => {\n        this.battery = response.data.voltage.toFixed(2);\n        this.azimut = response.data.azimut.toFixed(3);\n        this.elevation = response.data.elevation.toFixed(2);\n        this.setted_azimut = response.data.setted_azimut.toFixed(3);\n        this.setted_elevation = response.data.setted_elevation.toFixed(3);\n      });\n    }, 1000);\n    setInterval(() => { this.check_angles() }, 1000);\n  },\n\n  methods: {\n    zeroaxes() {\n      this.$ajax\n        .post('/api/v1/data/set/nullX', {\n          key: localStorage.getItem('rotator_client_id')\n        })\n    },\n    check_angles() {\n      bus.$emit('get_data_angles')\n\n      if (Math.abs(this.prev_azimut - this.azimut) < 1) {\n        if (Math.abs(this.azimut - this.setted_azimut) > 2) {\n          if (/*this.alerting_done == false && */this.alert_times != 0) {\n            this.alert_axes = true;\n          }\n          this.alert_times += 1\n        }\n        else {\n          this.alert_times = 0\n          this.alerting_done = false;\n          this.alert_axes = false;\n        }\n      }\n\n      this.prev_azimut = this.azimut\n\n    }\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}